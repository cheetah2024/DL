:
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.optimizers import SGD
import random


(x_train, y_train), (x_test, y_test) = cifar10.load_data()

4]:
#normalize the images to the range [0,1]
x_train, x_test = x_train / 255.0, x_test / 255.0

#convert labels to one-hot encoding
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse'

:
model = Sequential([
 Flatten(input_shape=(32,32,3)), 
 Dense(128, activation='relu'),
 Dense(64, activation='relu'),
 Dense(10, activation='softmax')
])

odel.compile(optimizer=SGD(),
 loss='categorical_crossentropy',
 metrics=['accuracy'])


In [12]:
history = model.fit(x_train, y_train,
 epochs=20,
 batch_size=32,
validation_data=(x_test, y_test))

est_loss, test_acc = model.evaluate(x_test, y_test)
print(f'Test Loss: {test_loss}')
print(f'Test Accuracy: {test_acc}')


lt.figure(figsize=(12, 4))
#plot loss
plt.subplot(1,2,1)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train','Test'],loc='upper right')


#plot accuracy
plt.subplot(1,2,2)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train','Test'],loc='upper right')
plt.show()


:
#plot one training image
plt.figure(figsize=(4,4))
plt.imshow(x_train[0])
plt.title(f'Train Image: {class_names[np.argmax(y_train[0])]}')
plt.axis('off')
plt.show()



#plot one testing img
n = random.randint(0, len(x_test) - 1)
plt.figure(figsize=(4, 4))
plt.imshow(x_test[n])
plt.title(f'Test Image: {class_names[np.argmax(y_test[n])]}')
plt.axis('off')
plt.show()

